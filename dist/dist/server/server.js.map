{"version":3,"file":"server.js","names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","http","require","fs","promises","path","yaml","colors","net","isPortAvailable","_x","_isPortAvailable","_callee","port","_callee$","_context","server","createServer","once","err","code","close","listen","startServer","_x2","_startServer","_callee3","readfile","config","PORT","UserDirectory","baseDirectory","contentTypes","portAvailable","requestHandler","_callee3$","_context3","t0","readFile","t1","load","render","join","__dirname","console","error","red","concat","_ref","_callee2","request","response","filePath","data","ext","contentType","_callee2$","_context2","log","url","extname","toLowerCase","writeHead","end","green","message","_x3","_x4","blue","yellow","t2","module","exports"],"sources":["../../src/server/server.js"],"sourcesContent":["\r\n/**\r\n * @file server.js\r\n * @brief Implementación de un servidor HTTP básico en Node.js.\r\n * \r\n * Este archivo contiene la implementación de un servidor HTTP que sirve archivos estáticos\r\n * desde un directorio específico, basado en una configuración leída de un archivo YAML.\r\n * El servidor maneja las solicitudes de archivos y determina el tipo de contenido a partir\r\n * de la extensión del archivo solicitado. También incluye una verificación para asegurar\r\n * que el puerto en el que se intenta iniciar el servidor está disponible.\r\n * \r\n * @module server\r\n * @requires http\r\n * @requires fs.promises\r\n * @requires path\r\n * @requires js-yaml\r\n * @requires colors\r\n * @requires net\r\n * \r\n * @license\r\n * \r\n * Copyright (c) [2024] [Optimus TEAM]. Todos los derechos reservados.\r\n * \r\n * Este código está sujeto a la licencia [Nombre de la Licencia] que se encuentra en el archivo\r\n * LICENSE en la raíz de este proyecto. No se permite la reproducción, distribución ni\r\n * modificación de este código sin el permiso explícito del titular de los derechos de autor.\r\n * \r\n * La utilización de este código está sujeta a las siguientes condiciones:\r\n * \r\n * - Se debe proporcionar un aviso de copyright y una copia de esta licencia en todas las\r\n *   copias o partes sustanciales del código.\r\n * - El código se proporciona \"tal cual\", sin garantías de ningún tipo, expresas o implícitas,\r\n *   incluyendo, pero no limitándose a, las garantías implícitas de comerciabilidad,\r\n *   idoneidad para un propósito particular y no infracción.\r\n * - En ningún caso el titular de los derechos de autor o los colaboradores serán responsables\r\n *   por cualquier reclamación, daño o cualquier otra responsabilidad, ya sea en una acción de\r\n *   contrato, agravio o de otro tipo, que surja de o en conexión con el código o el uso del\r\n *   mismo.\r\n * \r\n * \r\n * @version 1.0.4\r\n * @since [07/08/24]\r\n */\r\n\r\nconst http = require('http');\r\nconst fs = require('fs').promises; // Usar la versión promesa de fs\r\nconst path = require('path');\r\nconst yaml = require('js-yaml');\r\nconst colors = require('colors');\r\nconst net = require('net'); // Módulo para verificar si el puerto está en uso\r\n\r\n/**\r\n * @function isPortAvailable\r\n * @description Verifica si un puerto específico está disponible para su uso.\r\n * \r\n * Esta función asíncrona determina si el puerto dado está en uso por otro proceso en el sistema.\r\n * La función crea un servidor de red temporalmente y trata de escuchar en el puerto especificado. \r\n * Si el servidor puede comenzar a escuchar sin errores, el puerto está disponible. Si ocurre un\r\n * error debido a que el puerto ya está en uso (indicando por el código de error 'EADDRINUSE'), la\r\n * función devuelve `false` indicando que el puerto no está disponible. En caso de cualquier otro\r\n * tipo de error, la función lanzará una excepción.\r\n * \r\n * @param {number} port - El número de puerto que se desea verificar. Debe ser un número entero\r\n * representando el puerto en el rango permitido (0-65535).\r\n * \r\n * @returns {Promise<boolean>} - Una promesa que se resuelve con `true` si el puerto está disponible\r\n * o con `false` si el puerto está en uso. La promesa también puede ser rechazada si ocurre un\r\n * error inesperado durante la verificación.\r\n * \r\n * @example\r\n * \r\n * // Ejemplo de uso de la función isPortAvailable\r\n * isPortAvailable(3000).then((available) => {\r\n *     if (available) {\r\n *         console.log('El puerto 3000 está disponible.');\r\n *     } else {\r\n *         console.log('El puerto 3000 ya está en uso.');\r\n *     }\r\n * }).catch((err) => {\r\n *     console.error('Error al verificar el puerto:', err);\r\n * });\r\n * \r\n * @remarks\r\n * Esta función utiliza el módulo `net` de Node.js para crear un servidor TCP que intenta escuchar\r\n * en el puerto proporcionado. El servidor se elimina inmediatamente después de la verificación,\r\n * asegurando que no permanezca en ejecución ni ocupe el puerto más allá de la verificación.\r\n * \r\n * El manejo de eventos `error` y `listening` del servidor permite capturar y responder a los casos\r\n * en los que el puerto está en uso o cuando el servidor se ha vinculado exitosamente. El servidor\r\n * se cierra automáticamente una vez que se ha determinado la disponibilidad del puerto, lo que\r\n * minimiza el impacto en el sistema y evita posibles conflictos con otros servicios.\r\n */\r\n\r\nasync function isPortAvailable(port) {\r\n    return new Promise((resolve) => {\r\n        const server = net.createServer();\r\n        server.once('error', (err) => {\r\n            if (err.code === 'EADDRINUSE') {\r\n                resolve(false); // Puerto en uso\r\n            } else {\r\n                throw err;\r\n            }\r\n        });\r\n        server.once('listening', () => {\r\n            server.close(() => resolve(true)); // Puerto disponible\r\n        });\r\n        server.listen(port);\r\n    });\r\n}\r\n\r\n/**\r\n * @function startServer\r\n * @description Inicia un servidor HTTP utilizando la configuración especificada en un archivo YAML.\r\n * \r\n * Esta función asíncrona configura y pone en marcha un servidor HTTP que sirve archivos estáticos\r\n * desde un directorio especificado en un archivo de configuración YAML. La función realiza los\r\n * siguientes pasos:\r\n * \r\n * 1. Lee y analiza el archivo de configuración YAML para obtener los detalles de la configuración,\r\n *    incluyendo el puerto en el que el servidor escuchará las solicitudes y el directorio desde el cual\r\n *    se servirán los archivos estáticos.\r\n * 2. Verifica si el puerto especificado está disponible utilizando la función `isPortAvailable`.\r\n * 3. Configura un manejador de solicitudes que sirve los archivos estáticos solicitados y responde\r\n *    adecuadamente a los errores (por ejemplo, archivo no encontrado).\r\n * 4. Inicia el servidor HTTP y lo pone a escuchar en el puerto especificado.\r\n * \r\n * @param {string} readfile - La ruta al archivo de configuración YAML que contiene la configuración del\r\n * servidor. Este archivo debe estar en formato UTF-8 y debe incluir al menos la configuración del puerto\r\n * y del directorio de archivos.\r\n * \r\n * @throws {Error} Lanza una excepción si ocurre un error al leer o analizar el archivo de configuración.\r\n * \r\n * @returns {void} No retorna ningún valor. La función inicia el servidor y lo pone a escuchar\r\n * en el puerto especificado.\r\n * \r\n * @example\r\n * \r\n * // Ejemplo de uso de la función startServer\r\n * startServer('config.yml').then(() => {\r\n *     console.log('Servidor iniciado correctamente.');\r\n * }).catch((err) => {\r\n *     console.error('Error al iniciar el servidor:', err);\r\n * });\r\n * \r\n * @remarks\r\n * La función utiliza el módulo `fs` para leer el archivo de configuración y el módulo `yaml` para\r\n * analizar el contenido del archivo YAML. El puerto en el que el servidor escucha se verifica para\r\n * asegurar que no está en uso antes de intentar iniciar el servidor. Si el puerto ya está en uso, se\r\n * muestra un mensaje de error y el servidor no se inicia.\r\n * \r\n * El manejador de solicitudes (`requestHandler`) maneja las solicitudes de archivos estáticos y responde\r\n * con el contenido apropiado según el tipo de archivo. Si el archivo solicitado no se encuentra, el\r\n * servidor responde con un error 404. El tipo de contenido se determina a partir de la extensión del\r\n * archivo solicitado utilizando un mapeo de tipos de contenido.\r\n * \r\n * Los mensajes de la consola están coloreados para proporcionar una mejor visibilidad de los errores y\r\n * los estados del servidor. La función maneja los errores de manera robusta y proporciona mensajes\r\n * informativos para facilitar la depuración y la configuración del servidor.\r\n */\r\n\r\nasync function startServer(readfile) {\r\n    try {\r\n        const config = yaml.load(await fs.readFile(readfile, 'utf8'));\r\n        const PORT = config.server.port || 3000;\r\n        const UserDirectory = config.server.render;\r\n        const baseDirectory = path.join(__dirname, UserDirectory);\r\n        \r\n        const contentTypes = {\r\n            '.html': 'text/html',\r\n            '.js': 'application/javascript',\r\n            '.css': 'text/css',\r\n            '.json': 'application/json',\r\n            '.png': 'image/png',\r\n            '.jpg': 'image/jpeg',\r\n            '.gif': 'image/gif',\r\n            '.svg': 'image/svg+xml'\r\n        };\r\n\r\n        // Verificar si el puerto está disponible\r\n        const portAvailable = await isPortAvailable(PORT);\r\n        if (!portAvailable) {\r\n            console.error(`[ERROR]`.red, `El puerto ${PORT} ya está en uso.`.red);\r\n            return;\r\n        }\r\n\r\n        const requestHandler = async (request, response) => {\r\n            console.log(`Recibida solicitud: ${request.url}`);\r\n            const filePath = path.join(baseDirectory, request.url === '/' ? 'index.html' : request.url);\r\n            \r\n            try {\r\n                const data = await fs.readFile(filePath);\r\n                const ext = path.extname(filePath).toLowerCase();\r\n                const contentType = contentTypes[ext] || 'application/octet-stream';\r\n                \r\n                response.writeHead(200, { 'Content-Type': contentType });\r\n                response.end(data);\r\n                console.log('Renderizado con éxito'.green);\r\n            } catch (err) {\r\n                console.error(`Error al leer el archivo: ${err.message}`.red);\r\n                response.writeHead(404, { 'Content-Type': 'text/plain' });\r\n                response.end('404 - Archivo no encontrado');\r\n            }\r\n        };\r\n\r\n        const server = http.createServer(requestHandler);\r\n\r\n        server.listen(PORT, () => {\r\n            console.log(`OPTIMUS SERVER`.green);\r\n            console.log(`\\x1b[4mlocalhost:${PORT}\\x1b[0m`.blue);\r\n            console.log('You can change in #config.yml'.yellow);\r\n            console.log(`|_ RENDER -> ${UserDirectory}\\n  |_ index.html`.blue);\r\n        });\r\n\r\n    } catch (e) {\r\n        console.error(`Error en la configuración: ${e.message}`.red);\r\n    }\r\n}\r\n\r\n// Cargar el archivo YAML de configuración\r\nmodule.exports = { startServer };\r\n"],"mappings":"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","ignoreList":[]}